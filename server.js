const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

const PORT = 8001;
const ASSETS_DIR = path.join(__dirname, 'assets', 'Islands');
const DATA_DIR = path.join(__dirname, 'data');
const JS_DIR = path.join(__dirname, 'js');

// Ensure directories exist
if (!fs.existsSync(ASSETS_DIR)) {
    fs.mkdirSync(ASSETS_DIR, { recursive: true });
}
if (!fs.existsSync(DATA_DIR)) {
    fs.mkdirSync(DATA_DIR, { recursive: true });
}

const server = http.createServer(async (req, res) => {
    // Set CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;

    // Auto-save island data endpoints
    if (pathname === '/api/islands/save' && req.method === 'POST') {
        try {
            let body = '';
            
            req.on('data', chunk => {
                body += chunk.toString();
            });
            
            req.on('end', () => {
                try {
                    const islands = JSON.parse(body);
                    
                    // Save to JSON file for editor
                    const jsonPath = path.join(DATA_DIR, 'islands.json');
                    fs.writeFileSync(jsonPath, JSON.stringify(islands, null, 2));
                    
                    // Generate JavaScript file for game
                    const jsContent = `// Auto-generated by map editor - ${new Date().toISOString()}
// Do not edit manually - changes will be overwritten

const ISLANDS_DATA = ${JSON.stringify(islands, null, 2)};

// Export for both CommonJS and ES6 modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ISLANDS_DATA;
}
`;
                    
                    const jsPath = path.join(JS_DIR, 'islands-data.js');
                    fs.writeFileSync(jsPath, jsContent);
                    
                    console.log(`✅ Islands auto-saved: ${islands.length} islands`);
                    console.log(`📁 JSON: ${jsonPath}`);
                    console.log(`📁 JS: ${jsPath}`);
                    
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ 
                        success: true, 
                        count: islands.length,
                        jsonPath: 'data/islands.json',
                        jsPath: 'js/islands-data.js'
                    }));
                    
                } catch (error) {
                    console.error('❌ Error saving islands:', error);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Failed to save islands data' }));
                }
            });
            
        } catch (error) {
            console.error('❌ Error processing islands save request:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Server error' }));
        }
    } else if (pathname === '/api/islands/load' && req.method === 'GET') {
        try {
            const jsonPath = path.join(DATA_DIR, 'islands.json');
            
            if (fs.existsSync(jsonPath)) {
                const data = fs.readFileSync(jsonPath, 'utf8');
                const islands = JSON.parse(data);
                
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: true, islands }));
            } else {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: true, islands: [] }));
            }
        } catch (error) {
            console.error('❌ Error loading islands:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Failed to load islands data' }));
        }
    } else if (pathname === '/api/save-island-image' && req.method === 'POST') {
        try {
            let body = '';
            
            req.on('data', chunk => {
                body += chunk.toString();
            });
            
            req.on('end', () => {
                try {
                    const data = JSON.parse(body);
                    const { filename, imageData, islandName } = data;
                    
                    // Validate input
                    if (!filename || !imageData || !islandName) {
                        res.writeHead(400, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ error: 'Missing required fields' }));
                        return;
                    }
                    
                    // Clean filename
                    const cleanFilename = filename.replace(/[^a-zA-Z0-9._-]/g, '_');
                    const filepath = path.join(ASSETS_DIR, cleanFilename);
                    
                    // Convert base64 to buffer
                    const base64Data = imageData.replace(/^data:image\/[a-z]+;base64,/, '');
                    const buffer = Buffer.from(base64Data, 'base64');
                    
                    // Save file
                    fs.writeFileSync(filepath, buffer);
                    
                    console.log(`Saved island image: ${cleanFilename} for island: ${islandName}`);
                    
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ 
                        success: true, 
                        filename: cleanFilename,
                        path: `assets/Islands/${cleanFilename}`
                    }));
                    
                } catch (error) {
                    console.error('Error saving image:', error);
                    res.writeHead(500, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ error: 'Failed to save image' }));
                }
            });
            
        } catch (error) {
            console.error('Error processing request:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Server error' }));
        }
    } else if (pathname === '/api/list-island-images' && req.method === 'GET') {
        try {
            const files = fs.readdirSync(ASSETS_DIR)
                .filter(file => /\.(png|jpg|jpeg|gif|webp)$/i.test(file))
                .map(file => ({
                    filename: file,
                    path: `assets/Islands/${file}`
                }));
            
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ images: files }));
        } catch (error) {
            console.error('Error listing images:', error);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Failed to list images' }));
        }
    } else {
        // Serve static files (fallback to existing functionality)
        res.writeHead(404, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Not found' }));
    }
});

server.listen(PORT, () => {
    console.log(`🚀 GORET Map Editor Server running on http://localhost:${PORT}`);
    console.log(`📁 Island images will be saved to: ${ASSETS_DIR}`);
    console.log(`💡 Run your main game on http://localhost:8000 (http-server)`);
    console.log(`💡 This server handles image uploads for the map editor`);
});

// Handle server shutdown gracefully
process.on('SIGINT', () => {
    console.log('\n🛑 Shutting down server...');
    server.close(() => {
        console.log('✅ Server shut down successfully');
        process.exit(0);
    });
});